<!DOCTYPE html>
<html xmlns = "http://www.w3.org/1999/xhtml">
<head>
<meta charset="utf-8" />
<title>Blocks</title>
</head>
<style type="text/css" media="Screen">
a{text-decoration:none;color:blue;}
a:hover{text-decoration:underline;}
a:visited{color:blue;}
li{list-style-type:none;cursor:pointer;padding-left: 7px;padding-right: 27px;}
//li{list-style-type:none;cursor:pointer;padding-left: 7px;outline: 1px solid black}
i{padding: 7px;outline: 1px solid black;cursor:pointer;}
//ul{margin-right:auto;widthq:100%}
//td{cursor:pointer;}
sub{font-size:0.83rem;}
sup{font-size:0.83rem;}
//ul{display:flex;flex-direction:column-reverse;}
</style>
<body style="font-family:Arial;white-space:pre;line-height:0;"
><script
>'use strict'

// modulo
function mod(n,m)
   {
   return ((n%m)+m)%m;
   }
   
// modulo t
function modt(n)
   {
   return ((n%t)+t)%t;
   }   

// add string st to body
function addstring(st)
   {
   let a=document.createElement('p');
   a.innerHTML=st;
   document.body.appendChild(a);
   }
   
// add empty string to body
function addbr()
   {
   let a=document.createElement('p');
   a.innerHTML='\n';
   document.body.appendChild(a);
   }

function setpoffset(e)
   {
   poffset[e]=poffset[e-1]+pnumber[e-1];
   }

function getuar(a)
   {
   let ar=Array(par.length).fill(0);
   for(let e=0;e<par.length;e++)
      {
      let u=uar[e];
      for(let i=0;i<a.length;i++)
         u=u[a[i]];
      while(Array.isArray(u))
         u=u[t];
      ar[e]=u;
      }
   return ar;
   }
   
function setuar(a,ar)
   {
   for(let e=0;e<ar.length;e++)
      {
      let u=uar[e];
      for(let i=0;i<a.length&&Array.isArray(u[0]);i++)
         u=u[a[i]];
      while(Array.isArray(u[0]))
         u=u[t];
      u[a.length==t?a.at(-1):t]=ar[e];
      }
   }
   
function getuctree(a)
   {
   let ar=Array(t).fill(0);
   for(let e=0;e<t;e++)
      {
      let u=uctree[e];
      for(let i=0;i<a.length;i++)
         u=u[a[i]];
      while(Array.isArray(u))
         u=u[t];
      ar[e]=u;
      }
   return ar;
   }
   
function setuctree(a,ar)
   {
   while(ar.length<t)
      ar.push(t);
   for(let e=0;e<ar.length;e++)
      {
      let u=uctree[e];
      for(let i=0;i<a.length&&Array.isArray(u[0]);i++)
         u=u[a[i]];
      while(Array.isArray(u[0]))
         u=u[t];
      u[a.length==t?a.at(-1):t]=ar[e];
      }
   }

function blocktostring(a)
   {
   return ('u<sub>'+(a[0]==t?'â€¢':a[0])+'</sub>(0,'+JSON.stringify(a.slice(1)).slice(1,-1)+')').replaceAll(',',', ');
   }
   
function arraytostring(ar)
   {
   let st='0';
   for(let e=0;e<ar.length;e++)
   if(ar[e])
      {
      if(st=='0')
         st=ar[e]<0?'- ':'';     
      else
         st+=ar[e]<0?' - ':' + ';
      ar[e]=Math.abs(ar[e]);
      st+=(e==0||ar[e]!=1?ar[e]:'')+par[e];
      }
   return st;
   }

function uartostring(a)
   {
   return blocktostring(a)+' = '+arraytostring(getuar(a));
   }

/*function displaysquare()
   {
   for(let e=0;e<t;e++)
      {
      for(let i=0;i<t;i++)
         addstring(uartostring([i,e]));
      addbr();
      }
   }*/
   
function displayd(d,a=[])
   {
   if(d>1)
      for(let e=0;e<t;e++)
         {
         displayd(d-1,[...a,e]);
         addbr();
         }
   else
      for(let i=-1;i<t;i++)
         addstring(uartostring([i<0?t:i,...a]));
   if(!a.length)
      {
      addbr();
      addbr();
      addbr();
      addbr();
      addbr();
      addbr();
      addbr();
      addbr();
      }
   }

function adduar(a,n)
   {
   let u=uar;
   let e=t;
   for(let i=0;i<a.length;i++)
      if(e)
         {
         u=u[a[i]];
         e--;
         }     
   while(e)
      {
      u=u[t];
      e--;
      }
   let i=a.length>t?a[t-1]:t;
   u[i]+=n;
   }

function displaypar()
   {
   addstring('Total number of parameters: '+par.length);
   addbr();
   addbr();
   for(let e=1;e<pnumber.length;e++)
   if(poffset[e+1])
      {
      let st=pnumber[e]+' parameter'+(pnumber[e]==1?'':'s')+' of degree '+(e-1)+' : ';
      for(let i=0;i<pnumber[e];i++)
         st+=(i?', ':'')+(e>1?par[poffset[e]+i]:'1');   
      addstring(st);
      addbr();
      }
   addbr();
   addbr();
   addbr();
   }

// extend list of parameters
function extp(d)
   {
   for(let i=0;i<pnumber[d-1];i++)
   for(let e=0;e<pnumber[2];e++)
      {
      let a=[...pstruar[poffset[d-1]+i]];
      a[e]++;
      let st=JSON.stringify(a);
      let u=poffset[d];
      while(u<par.length&&st!=JSON.stringify(pstruar[u]))
         u++;
      if(u==par.length)
         {
         let s='';
         for(let y=0;y<pnumber[2];y++)
         if(a[y])
            {
            s+=spar[y];
            if(a[y]>1)
               s+='<sup>'+a[y]+'</sup>';
            }
         par.push(s);
         pstruar.push(a);
         uar.push(JSON.parse(JSON.stringify(zeroarray)));
         }
      }
   poffset[d+1]=par.length;
   pnumber[d]=poffset[d+1]-poffset[d];
   //for(let e=0;e<pnumber[d];e++)
   //for(let i=0;i<poffset[d];i++)
   //   pstruar[i].push(0);
   }

function filluar(d)
   {
   function mult(a,z)
      {
      let s=Array(par.length).fill(0);
      for(let e=0;e<a.length;e++)
         if(a[e])
            for(let i=0;i<Math.min(poffset[3],z.length);i++)
               if(z[i])
                  s[ar[i][e]]+=a[e]*z[i];
      return s;
      }
   
   function setd(d,a=[])
      {
      if(d>1)
         for(let e=0;e<t;e++)
            setd(d-1,[...a,e]);
      else
         for(let i=-1;i<t;i++)
            {
            let d=Array(par.length).fill(0);
            let lxk=[i<0?t:i,...a];
            let x=lxk.slice(1,-1);
            let k=lxk.at(-1);
            if(i==k)
               {
               let s=mult(getuar([t,...x]),[0,1]);
               for(let e=0;e<par.length;e++)
                  d[e]+=s[e];
               }
            for(let m=0;m<t;m++)
               {
               let s=mult(getuar([m,...x]),getuar([modt(i-m),modt(k-m)]));
               for(let e=0;e<par.length;e++)
                  d[e]+=s[e];
               }
            setuar(lxk,d);
            }
      }
   
   var ar=[];
   for(let e=0;e<poffset[3];e++)
      ar.push(JSON.parse(JSON.stringify(Array(poffset[d]).fill(0))));
   for(let i=0;i<poffset[d];i++)
   for(let e=0;e<poffset[3];e++)
      {
      let a=[...pstruar[i]];
      if(e>0)
         a[e-1]++;
      let st=JSON.stringify(a);
      let u=0;
      while(st!=JSON.stringify(pstruar[u]))
         u++;
      ar[e][i]=u;
      }
   setd(d);
   }

function filluctree(d,a=[])
   {
   if(d>1)
      for(let e=0;e<t;e++)
         filluctree(d-1,[...a,e]);
   else
      for(let i=0;i<t;i++)
         {
         let s=[i,...a];
         let j=JSON.stringify(s);
         let g=getuctree(s);
         if(JSON.stringify(g)==tarz)
            {
            let e=1;
            while(e<a.length-1&&g[e+1]==g[e])
               e++;
            if(e==a.length-1)
               {
               let m=0;
               let x=[...s];
               while(m<t)
                  {
                  for(let e=0;e<s.length;e++)
                     x[e]=modt(s[e]+m);
                  e=a.length;
                  while(e>1&&x[e]<=x[e-1])
                     e--;
                  if(e==1&&x[1]<=m)
                     m++;
                  else
                     {
                     let u=x[e];
                     x[e]=e==1?m:x[e-1];
                     if(e>1)
                        {
                        x[e-1]=u;
                        u=m;
                        }
                     for(let e=0;e<s.length;e++)
                        x[e]=modt(x[e]-u);
                     g=getuctree(x);
                     let h=JSON.stringify(g);
                     while(h!=tarz&&h!=j)
                        {
                        g=getuctree(g);
                        h=JSON.stringify(g);
                        }
                     if(h==j)
                        m++;
                     else
                        {
                        m=t;
                        setuctree(s,x);
                        }
                     }
                  }
               }
            }
         }
   }

function updateuar(d,e,s,a=[])
   {
   if(d>1)
      for(let i=0;i<t;i++)
         updateuar(d-1,e,s,[...a,i]);
   else
      for(let i=0;i<=t;i++)
         {
         let x=[i,...a];
         let g=getuar(x);
         if(g[e])
            {
            for(let i=0;i<par.length;i++)
               g[i]+=g[e]*s[i];
            g[e]=0;
            setuar(x,g);
            }
         }
   }

function remd(d,a=[])
   {
   if(d>1)
      for(let e=0;e<t;e++)
         remd(d-1,[...a,e]);
   else
      for(let i=0;i<t;i++)
         {
         let s=[i,...a];
         let g=getuctree(s);
         if(JSON.stringify(g)!=tarz)
            {
            while(g.at(-1)==t)
               g.pop();
            let x=getuar(s);
            let h=getuar(g);
            for(let e=0;e<par.length;e++)
               x[e]-=h[e];
            let e=par.length-1;
            while(e>=0&&Math.abs(x[e])<=0.001)
               e--;
            if(Math.abs(x[e])>0.001)
               {
               //e=4;
               let y=[...x];
               for(let i=0;i<e;i++)
               //for(let i=0;i<par.length;i++)
                  x[i]=-x[i]/x[e];
               x[e]=0;
               addstring(blocktostring(s)+' = '+blocktostring(g));
               addstring(arraytostring(getuar(s))+' = '+arraytostring(h));
               addstring(arraytostring(y)+' = 0');
               addstring(par[e]+' = '+arraytostring([...x]));
               addbr();
               addbr();
               addbr();
               addbr();
               if(c)
               {c--;
               updateuar(s.length,e,x);
               }
               }
            }
         }
   }

function displayla()
   {
   let ar=[];
   for(let e=0;e<t;e++)
      ar.push(JSON.parse(JSON.stringify(Array(par.length).fill(0))));
   ar[0][0]=lab[1];
   for(let e=0;e<t;e++)
      {
      for(let u=2;u<=t;u++)
         {
         let a=[e];
         for(let i=1;i<u;i++)
            a.push(0);
         let s=getuar(a);
         for(let i=0;i<par.length;i++)
            ar[e][i]+=lab[u]*s[i];
         }
      for(let i=0;i<par.length;i++)
         ar[e][i]=Math.round(ar[e][i]*1000)/1000;
      addstring('u<sub>'+e+'</sub> = '+arraytostring([...ar[e]]));
      }
   addbr();
   for(let e=1;e<t;e++)
      {
      for(let i=0;i<par.length;i++)
         ar[e][i]=ar[0][i]-ar[e][i];
      addstring('u<sub>0</sub> - u<sub>'+e+'</sub> = '+arraytostring([...ar[e]]));
      }  
   }





let lar=['f','g','h','i','j','k','l','m','n','o','p'];

// number of types
let t=3;

let s=Math.floor(t/2);

// true: q is even, false: q is odd
let qeven=true;

let teven=t%2?false:true;

if(!teven)qeven=true;

let tarz=JSON.stringify(Array(t).fill(0));

let lab=[1,1];
for(let e=1;e<t;e++)
   {
   lab.push(0);
   let a=[0,...lab];
   for(let i=0;i<a.length-1;i++)
      lab[i]=a[i]+a[i+1];
   }
for(let e=1;e<=t;e++)
for(let i=0;i<e;i++)
   lab[e]*=t;

let zeroarray=Array(t+1).fill(0);

for(let e=3;e<t;e++)
   zeroarray=Array(t+1).fill(JSON.parse(JSON.stringify(zeroarray)));
zeroarray=Array(t).fill(JSON.parse(JSON.stringify(zeroarray)));
//zeroarray=Array(t+1).fill(JSON.parse(JSON.stringify(zeroarray)));
zeroarray=Array(t+1).fill(JSON.parse(JSON.stringify(zeroarray)));

let poffset=Array(t+2).fill(0);
poffset[2]=1;

let pnumber=Array(t+1).fill(1);
pnumber[2]=(teven?t*(t-2)/2:(t-1)*(t-1)/2)+1;
setpoffset(3);

// array of unique parameters of square blocks
let spar=Array(pnumber[2]).fill('');
spar[0]='q';
let u=0;
for(let e=0;e<s;e++)
for(let i=0;i<(teven&&e==s-1?s-1:t-1);i++)
   {
   u++;
   spar[u]=lar[e]+'<sub>'+i+'</sub>';
   }

// array of unique parameters
let par=Array(poffset[3]).fill('');

// array of multipliers of parameters
let pstruar=Array(poffset[3]).fill([]);
pstruar[0]=Array(pnumber[2]).fill(0);

for(let e=0;e<pnumber[2];e++)
   {
   par[e+1]=spar[e];
   pstruar[e+1]=Array(pnumber[2]).fill(0);
   pstruar[e+1][e]=1;
   }




// array of blocks
// 1st parameter - unique term
// 2nd parameter - index
// other parameters - coordinates of blocks except the 1st
let uar=[];
for(let e=0;e<poffset[3];e++)
   uar.push(JSON.parse(JSON.stringify(zeroarray)));
   
 let uctree=[];
for(let e=0;e<t;e++)
   uctree.push(JSON.parse(JSON.stringify(zeroarray)));  

u=1;
adduar([0,t,qeven?0:s],1);
adduar([0,0,0],-1);
for(let e=0;e<t;e++)
   adduar([1,e,0],1);

for(let e=1;e<s+1;e++)
   {
   if(!teven||e!=s)
      {
      adduar([1,t-1,e],1);
      adduar([1,modt(t-1-e),modt(-e)],1);
      adduar([1,t-1,0],-1);
      adduar([1,modt(t-1-e),0],-1);
      }
   for(let i=0;i<(teven&&e==s?s-1:t-1);i++)
      {
      u++;
      adduar([u,i,e],1);
      adduar([u,modt(i-e),modt(-e)],1);
      adduar([u,i,0],-1);
      adduar([u,modt(i-e),0],-1);
      if(!teven||e!=s)
      	  {
      	  adduar([u,t-1,e],-1);
      	  adduar([u,modt(t-1-e),modt(-e)],-1);
      	  adduar([u,t-1,0],1);
      	  adduar([u,modt(t-1-e),0],1);
      	  }
      }
   }
   
if(teven)
   {
   if(!qeven)
      {
      adduar([0,s-1,s],-0.5);
      adduar([0,t-1,s],-0.5);
      adduar([0,s-1,0],0.5);
      adduar([0,t-1,0],0.5);
      }
   adduar([1,s-1,s],0.5);
   adduar([1,t-1,s],0.5);
   adduar([1,s-1,0],-0.5);
   adduar([1,t-1,0],-0.5);
   for(let e=poffset[3]-s+1;e<poffset[3];e++)
      {
      adduar([e,s-1,s],-1);
      adduar([e,t-1,s],-1);
      adduar([e,s-1,0],1);
      adduar([e,t-1,0],1);
      }
   }

let c=1000000;

displayd(2);

for(let e=3;e<=t;e++)
   {
   extp(e);
   displaypar();
   filluar(e);
   filluctree(e);
   displayd(e);
   remd(e);
   displayd(e);
   }
displayla();
   

</script></body></html>
